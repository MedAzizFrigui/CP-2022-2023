#include<iostream>
#include <cmath>
#include <vector>
#include <iomanip>
#define ll long long
#define endl '\n'
#define fi first
#define se second
#define mp make_pair
using namespace std;
const double eps = 1e-7;
const double pi = 3.141592653589793;
//GEOMETRY

//void representvector(vector<double> v){
//    for(auto x:v){
//        cout << x<<" ";
//    }
//}

//double trianglesurface(vector<double> a, vector<double> b, vector<double> c){
//    vector<double> ba = {b[0]-a[0], b[1]-a[1]};
//    vector<double> ca = {c[0]-a[0], c[1]-a[1]};
//    return abs(ba[0]*ca[1] - ba[1]*ca[0])/2.0;
//}

//vector<double> rotatevector(vector<double> v, double angle){
//    double x = v[0]*cos(angle) - v[1]*sin(angle);
//    double y = v[0]*sin(angle) + v[1]*cos(angle);
//    vector<double> v1 = {x, y};
//    return v1;
//}
//
//double dist(vector<double> x, vector<double> y){
//    double d = sqrt((x[0]-y[0]) * (x[0]-y[0]) +
//                (x[1]-y[1]) * (x[1]-y[1]));
//    return d;
//}
//
//vector<double> milieu(vector<double> a, vector<double> b){
//    vector<double> v = {(a[0]+b[0])/2, (a[1]+b[1])/2};
//    return v;
//}
//
//vector<double> equationdroite(vector<double> v1, vector<double> v2){
//    double a = v1[1]-v2[1];
//    double b = v2[0]-v1[0] ;
//    double c = -b*v1[1] - a*v1[0];
//    vector<double> v={a, b, c};
//    return v;
//}
//
//vector<double> intersection(vector<double> x, vector<double> y){
//    double a=x[0], b=x[1], c=x[2], d=y[0], e=y[1], f=y[2];
//    if(abs(a*e-b*d)<eps){
//        vector<double> v;
//        return v;
//    }
//    double det = 1/(a*e-b*d);
//    double x1 = det * (f*b-c*e);
//    double x2 = det * (c*d-f*a);
//    vector<double> v={x1, x2};
//    return v;
//}
//
//vector<double> mediatrice(vector<double> a, vector<double> b){
//    vector<double> ab = equationdroite(a, b);
//    vector<double> medab = {-ab[1], ab[0], 0};
//    vector<double> milab = milieu(a, b);
//    medab[2] = -medab[0]*milab[0] - medab[1]*milab[1];
//    return medab;
//}
//
//vector<double> circonscrit(vector<double> a, vector<double> b, vector<double> c){
//    vector<double> medab = mediatrice(a, b);
//    vector<double> medbc = mediatrice(b, c);
//    return intersection(medab, medbc);
//}

int main(void){
//    double x1, x2, x3, y1, y2, y3;
//    while(cin >> x1>>y1>>x2>>y2>>x3>>y3){
//        vector<double> a={x1, y1}, b={x2, y2}, c={x3, y3};
//        vector<double> x = circonscrit(a, b, c);
//        cout<< fixed <<setprecision(2) <<dist(a,x)*2*pi<<endl;
//    }
    pair<int, int> dir[8];
    dir[0] =  mp(-1, -1);
    dir[1] =  mp(0, -1);
    dir[2] =  mp(1, -1);
    dir[3] =  mp(-1, 0);
    dir[4] =  mp(0, 0);
    dir[5] =  mp(1, 0);
    dir[6] =  mp(-1, 1);
    dir[7] =  mp(0, 1);
    dir[8] =  mp(1, 1);
    int t;
    cin >> t;
    while(t--){
        string x;
        pair<int, int> curr = mp(0, 0), next = mp(0, 0);
        cin >> x;
        double sum = 0.0;
        for(int i=0; i< x.size(); ++i){
                next.fi = curr.fi + dir[x[i]-'0'-1].fi;
                next.se = curr.se + dir[x[i]-'0'-1].se;
                sum += curr.fi*next.se - curr.se*next.fi;
                curr = next;
        }
        double ans = abs(sum)/2.0;
        cout << ans << endl;
    }
    return 0;
}
